//1ms csn

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int row=obstacleGrid.length;
        int col=obstacleGrid[0].length;
        int[][] step=new int[row][col];
        // special cases
        if(obstacleGrid[0][0]==1) return 0;
        
        step[0][0]=0;
        if(col>1){
            if(obstacleGrid[0][1]==1)
                step[0][1]=0;
            else step[0][1]=1;
        } 
        if(row>1){
            if(obstacleGrid[1][0]==1)
                step[1][0]=0;
            else step[1][0]=1;
        } 
        if(row==1&&col==1){
            if(obstacleGrid[0][0]==1) return 0;
            else return 1;
        }
        
        //loop
        for(int j=0;j<col;j++){
            for(int i=0;i<row;i++){
                if(i+j<=1) continue;
                if(obstacleGrid[i][j]==1){
                    step[i][j]=0;
                    continue;
                }
                int left=j-1>=0?step[i][j-1]:0;
                int up=i-1>=0?step[i-1][j]:0;
                step[i][j]=left+up;
            }
        }
        return step[row-1][col-1];
    }
}

//0ms
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
    int width = obstacleGrid[0].length;
    int[] dp = new int[width];
    dp[0] = 1;
    for (int[] row : obstacleGrid) {
        for (int j = 0; j < width; j++) {
            if (row[j] == 1)
                dp[j] = 0;
            else if (j > 0)
                dp[j] += dp[j - 1];
        }
    }
    return dp[width - 1];
}
