//2ms csn
class Solution {
    public int[][] generateMatrix(int n) {
        int[][] matrix=new int[n][n];
        if(n==0) return matrix;
        if(n==1){
            matrix[0][0]=1;
            return matrix;
        }
        int r=0;
        int c=0;
        int num=1;
        for(int loop=0;loop<n/2;loop++){
            while(c<n-loop) matrix[r][c++]=num++;
            c--;
            r++;
            while(r<n-loop) matrix[r++][c]=num++;
            r--;
            c--;
            while(c>=loop) matrix[r][c--]=num++;
            r--;
            c++;
            while(r>=loop+1) matrix[r--][c]=num++;
            r++;
            c++;
        }
        if(n%2==1) matrix[n/2][n/2]=n*n;
        return matrix;
    }
}

//2ms
public class Solution {
   public static int[][] generateMatrix(int n) {
      int[][] ret = new int[n][n];
      int left = 0,top = 0;
      int right = n -1,down = n - 1;
      int count = 1;
      while (left <= right) {
        for (int j = left; j <= right; j ++) {
          ret[top][j] = count++;
        }
        top ++;
        for (int i = top; i <= down; i ++) {
          ret[i][right] = count ++;
        }
        right --;
        for (int j = right; j >= left; j --) {
          ret[down][j] = count ++;
        }
        down --;
        for (int i = down; i >= top; i --) {
          ret[i][left] = count ++;
        }
        left ++;
      }
      return ret;
    }
}
