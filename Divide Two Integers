//16ms
class Solution {
    public int divide(int dividend, int divisor) {
    long result = divideLong(dividend, divisor);
    return result > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)result;
  }

// It's easy to handle edge cases when
// operate with long numbers rather than int
    public long divideLong(long dividend, long divisor) {
    // Remember the sign
    boolean negative = dividend < 0 != divisor < 0;
    // Make dividend and divisor unsign
    if (dividend < 0) dividend = -dividend;
    if (divisor < 0) divisor = -divisor;

    // Return if nothing to divide
    if (dividend < divisor) return 0;

    // Sum divisor 2, 4, 8, 16, 32 .... times
      long sum = divisor;
      long divide = 1;
      while ((sum+sum) <= dividend) {
        sum += sum;
        divide += divide;
      }

      // Make a recursive call for (devided-sum) and add it to the result
      return negative ? -(divide + divideLong((dividend-sum), divisor)) :
        (divide + divideLong((dividend-sum), divisor));
  }
}

//20ms left shift << which is same as multiply 2 but without using multiplication.
class Solution{
    public int divide(int dividend, int divisor) {
        boolean isNegative = (dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0) ? true : false;
        long absDividend = Math.abs((long) dividend);
        long absDivisor = Math.abs((long) divisor);
        long result = 0;
        while(absDividend >= absDivisor){
            long tmp = absDivisor, count = 1;
            while(tmp <= absDividend){
                tmp <<= 1;
                count <<= 1;
            }
            result += count >> 1;
            absDividend -= tmp >> 1;
        }
        return  isNegative ? (int) ~result + 1 : result > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) result;
    }
}
