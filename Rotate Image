//csn 2ms(one extra space)
class Solution {
  public void rotate(int[][] matrix) {
    int n = matrix.length;
    for(int i=0;i<n/2;i++){   //n/2个环
        for(int j=i;j<n-1-i;j++){
            int tmp=matrix[i][j];
            matrix[i][j]=matrix[n-j-1][i];
            matrix[n-j-1][i]=matrix[n-i-1][n-j-1];
            matrix[n-i-1][n-j-1]=matrix[j][n-i-1];
            matrix[j][n-i-1]=tmp;
            
        }
    }
  }
}

(n*n extra space)
class Solution {
    public void rotate(int[][] matrix) {
        int n=matrix.length;
        int[] arr=new int[n*n];
        int id=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                arr[id++]=matrix[i][j];
            }
        }
        id=0;
        for(int j=n-1;j>=0;j--){
            for(int i=0;i<n;i++){
                matrix[i][j]=arr[id++];
            }
        }
    }
}

(leetcode example solution )
class Solution {
  public void rotate(int[][] matrix) {
    int n = matrix.length;
    for (int i = 0; i < n / 2 + n % 2; i++) {
      for (int j = 0; j < n / 2; j++) {
        int[] tmp = new int[4];
        int row = i;
        int col = j;
        for (int k = 0; k < 4; k++) {
          tmp[k] = matrix[row][col];
          int x = row;
          row = col;
          col = n - 1 - x;
        }
        for (int k = 0; k < 4; k++) {
          matrix[row][col] = tmp[(k + 3) % 4];
          int x = row;
          row = col;
          col = n - 1 - x;
        }
      }
    }
  }
}
