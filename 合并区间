//22ms Sort non-Array
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval> list=new ArrayList<>();
        if(intervals.size()==0||intervals.size()==1) return intervals;
        Collections.sort(intervals,new mySort());
        // or use lamda expression :intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));
        Interval tmp=intervals.get(0);
        for(int i=1;i<intervals.size();i++){
            Interval latter=intervals.get(i);
            if(tmp.end>=latter.start){
                tmp.end=Math.max(tmp.end,latter.end);
            }
            else{
                list.add(new Interval(tmp.start,tmp.end));
                tmp.start=latter.start;
                tmp.end=latter.end;
            } 
        }
        list.add(tmp);
        return list;
    }
    public class mySort implements Comparator<Interval>{
        @Override
        public int compare(Interval i1,Interval i2){
            if(i1.start!=i2.start)
                return i1.start-i2.start;
            else return i1.end-i2.end;
        }
    }
}


//18ms not understand
public List<Interval> merge(List<Interval> intervals) {
	// sort start&end
	int n = intervals.size();
	int[] starts = new int[n];
	int[] ends = new int[n];
	for (int i = 0; i < n; i++) {
		starts[i] = intervals.get(i).start;
		ends[i] = intervals.get(i).end;
	}
	Arrays.sort(starts);
	Arrays.sort(ends);
	// loop through
	List<Interval> res = new ArrayList<Interval>();
	for (int i = 0, j = 0; i < n; i++) { // j is start of interval.
		if (i == n - 1 || starts[i + 1] > ends[i]) {
			res.add(new Interval(starts[j], ends[i]));
			j = i + 1;
		}
	}
	return res;
}
