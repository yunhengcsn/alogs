//9ms csn
class Solution {
    public int minPathSum(int[][] grid) {
        int r=grid.length;
        int c=grid[0].length;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(i==0&&j==0) continue;
                int left=j-1>=0?grid[i][j-1]:Integer.MAX_VALUE;
                int up=i-1>=0?grid[i-1][j]:Integer.MAX_VALUE;
                grid[i][j]+=Math.min(left,up);
                //System.out.println(grid[i][j]);
            }
        }
        return grid[r-1][c-1];
    }
}

//7ms
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        if (m == 0 || grid[0].length == 0) return 0;
        int n = grid[0].length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                dp[j] = (j > 0 ? Math.min(dp[j - 1], dp[j]) : dp[j]) + grid[i][j];
            }
        }
        return dp[n - 1];
    }
}
