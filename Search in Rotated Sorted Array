//cns 13ms
class Solution {
    public int search(int[] nums, int target) {
        int start=0,end=1;
        if(nums.length==0) return -1;
        if(nums.length==1&&target!=nums[0]) return -1;
        if(target==nums[nums.length-1]) return nums.length-1;
        
        if(target==nums[0]) return 0;
        else if(target<nums[0]){
            while((start<nums.length-1)&&(nums[start+1]>nums[start])) start++;    
            start++;
            end=nums.length;
        }
        else {while((end<nums.length)&&(nums[end]>nums[end-1])) end++;}
        int ans=Arrays.binarySearch(nums,start,end,target);
        return ans>=0?ans:-1;
    }
}

//8ms
class Solution {
    public int search(int[] nums, int target) {
         int lo = 0, hi = nums.length;
        while (lo < hi) {
            int mid = (lo + hi) / 2;

            double num = (nums[mid] < nums[0]) == (target < nums[0])
                       ? nums[mid]
                       : target < nums[0] ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;

            if (num < target)
                lo = mid + 1;
            else if (num > target)
                hi = mid;
            else
                return mid;
        }
    return -1;
    }
}
